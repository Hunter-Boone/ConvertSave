name: Build and Release

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: Install dependencies
        run: npm ci

      - name: Build Tauri app (Windows/Linux)
        if: matrix.platform != 'macos-latest'
        run: npm run tauri build

      - name: Build Intel macOS
        if: matrix.platform == 'macos-latest'
        run: npm run tauri build -- --target x86_64-apple-darwin

      - name: Build Apple Silicon macOS
        if: matrix.platform == 'macos-latest'
        run: npm run tauri build -- --target aarch64-apple-darwin

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          retention-days: 1
          path: |
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          retention-days: 1
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/appimage/*.AppImage

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          retention-days: 1
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Organize release files
        run: |
          mkdir -p ./release-assets

          # Copy only installer files (excluding .app to save space)
          find linux-build -name "*.deb" -exec cp {} ./release-assets/ \; 2>/dev/null || true
          find linux-build -name "*.rpm" -exec cp {} ./release-assets/ \; 2>/dev/null || true
          find linux-build -name "*.AppImage" -exec cp {} ./release-assets/ \; 2>/dev/null || true
          find macos-build -name "*.dmg" -exec cp {} ./release-assets/ \; 2>/dev/null || true
          find windows-build -name "*.msi" -exec cp {} ./release-assets/ \; 2>/dev/null || true
          find windows-build -name "*.exe" -exec cp {} ./release-assets/ \; 2>/dev/null || true

          # Remove original artifact directories to prevent double upload
          rm -rf linux-build macos-build windows-build

          echo "Release assets ready:"
          ls -la ./release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release-assets/*
          name: ConvertSave ${{ github.ref_name }}
          body: |
            ## ConvertSave ${{ github.ref_name }}

            A local file conversion utility with support for images, videos, audio, and documents.

            ### Downloads
            - **Windows**: Download the `.msi` or `.exe` installer
            - **macOS**: Download the `.dmg` disk image (Universal - works on Intel & Apple Silicon)
            - **Linux**: Download `.deb`, `.rpm`, or `.AppImage` package

            ### Features
            - Convert images, videos, audio, and documents
            - Batch conversion support
            - On-demand tool downloads (FFmpeg, Pandoc)
            - No bundled binaries - GPL compliant
            - Modern UI with drag & drop
            - Cross-platform support

            ### Important Notes
            - **Tools are NOT bundled**: FFmpeg and Pandoc are downloaded on first use
            - **Small installer size**: ~5-10 MB (vs 100+ MB with bundled tools)
            - **GPL Compliant**: Downloads tools from official sources
            - See `NOTICE.md` for license information

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.repository.default_branch }}...${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
